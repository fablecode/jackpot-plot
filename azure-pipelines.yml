# ========================== Jackpot CI ==========================
# Runs: Restore → Build → Unit Tests (coverlet.console)
#    → Coverage outputs: JSON (merged) + Cobertura (per project)
#    → Merge (Cobertura) + Gate + HTML + JsonSummary
#    → Integration Tests → Publish Reports
# =================================================================

trigger:
  - main

variables:
  DOTNET_SDK: '8.0.x'
  BUILD_CONFIGURATION: 'Release'
  SOLUTION: 'JackpotPlot.sln'
  COVERAGE_THRESHOLD: '70'                       # Minimum total line % required (gate)
  COVERAGE_EXCLUDE_BY_FILE: '**/Migrations/*.cs;**/Generated/**/*.cs;**/bin/**;**/obj/**'
  NUGET_PACKAGES: '$(Pipeline.Workspace)/.nuget/packages'

pool:
  vmImage: 'ubuntu-latest'

steps:
  # ---------------- Checkout ----------------
  - checkout: self
    fetchDepth: 0

  # ---------------- .NET SDK ----------------
  - task: UseDotNet@2
    displayName: "Install .NET SDK $(DOTNET_SDK)"
    inputs:
      packageType: 'sdk'
      version: '$(DOTNET_SDK)'

  # ---------------- Restore & Build ----------------
  - script: |
      set -euo pipefail
      export NUGET_PACKAGES="$(NUGET_PACKAGES)"
      dotnet restore "$(SOLUTION)"
      dotnet build "$(SOLUTION)" -c "$(BUILD_CONFIGURATION)" --no-restore
    displayName: 'dotnet restore + build'

  # ---------------- Tools ----------------
  - script: |
      set -euo pipefail
      dotnet tool install --global coverlet.console
      dotnet tool install --global dotnet-reportgenerator-globaltool
      echo '##vso[task.prependpath]'"$HOME/.dotnet/tools"
    displayName: 'Install coverlet + reportgenerator'

  # ---------------- Unit Tests + Coverage (coverlet.console) + Merge + Gate ----------------
  - script: |
      set -euo pipefail

      OUT_ROOT="$(Build.SourcesDirectory)/TestResults"
      TRX_DIR="$OUT_ROOT"
      COV_DIR="$OUT_ROOT/coverage"
      HTML_DIR="$OUT_ROOT/Coverage/Report"
      MERGED_COB="$HTML_DIR/Cobertura.xml"
      SUMMARY_JSON="$HTML_DIR/Summary.json"
      mkdir -p "$TRX_DIR" "$COV_DIR" "$HTML_DIR"

      threshold=$(COVERAGE_THRESHOLD)
      echo "Coverage threshold (line,total): ${threshold}%"

      # Discover Unit test projects
      mapfile -t UNIT_TESTS < <(git ls-files '**/*Unit.Tests.csproj' | sort)
      if [ "${#UNIT_TESTS[@]}" -eq 0 ]; then
        echo "No Unit test projects found."
        exit 1
      fi

      MERGE_ANCHOR_JSON=""

      for csproj in "${UNIT_TESTS[@]}"; do
        name="$(basename "$csproj")"            # e.g. JackpotPlot.Domain.Unit.Tests.csproj
        base="${name%.csproj}"                  # e.g. JackpotPlot.Domain.Unit.Tests
        sut_prefix="${base%.Unit.Tests}"        # e.g. JackpotPlot.Domain
        if [[ "$sut_prefix" == "$base" ]]; then sut_prefix="JackpotPlot"; fi

        include_filter="[${sut_prefix}*]*"
        test_assembly_glob="$(dirname "$csproj")/bin/$(BUILD_CONFIGURATION)/**/${base}.dll"

        out_json_file="$COV_DIR/${base}.json"               # explicit .json
        out_cob_file="$COV_DIR/${base}.cobertura.xml"       # explicit .xml

        echo ">>> Running: $name"
        echo "    SUT Include: $include_filter"
        echo "    JSON file:   $out_json_file"
        echo "    Cobertura:   $out_cob_file"

        # --- Pass 1: JSON (allows merge-with across projects) ---
        if [ -n "${MERGE_ANCHOR_JSON}" ]; then
          coverlet $test_assembly_glob \
            --target "dotnet" \
            --targetargs "test \"$csproj\" -c $(BUILD_CONFIGURATION) --no-build --logger trx;LogFileName=${base}.trx --results-directory \"$TRX_DIR\"" \
            --include "$include_filter" \
            --exclude-by-file "$(COVERAGE_EXCLUDE_BY_FILE)" \
            --format json \
            --output "$out_json_file" \
            --merge-with "$MERGE_ANCHOR_JSON"
        else
          coverlet $test_assembly_glob \
            --target "dotnet" \
            --targetargs "test \"$csproj\" -c $(BUILD_CONFIGURATION) --no-build --logger trx;LogFileName=${base}.trx --results-directory \"$TRX_DIR\"" \
            --include "$include_filter" \
            --exclude-by-file "$(COVERAGE_EXCLUDE_BY_FILE)" \
            --format json \
            --output "$out_json_file"
        fi
        MERGE_ANCHOR_JSON="$out_json_file"

        # --- Pass 2: Cobertura (native XML per project, no merge) ---
        coverlet $test_assembly_glob \
          --target "dotnet" \
          --targetargs "test \"$csproj\" -c $(BUILD_CONFIGURATION) --no-build" \
          --include "$include_filter" \
          --exclude-by-file "$(COVERAGE_EXCLUDE_BY_FILE)" \
          --format cobertura \
          --output "$out_cob_file"
      done

      echo
      echo "Coverage files present in $COV_DIR:"
      ls -la "$COV_DIR" || true

      echo
      echo ">>> Merging to HTML + Cobertura + JsonSummary via ReportGenerator"
      # Merge ALL per-project Cobertura files; also include JSON (helps completeness for HTML)
      reportgenerator \
        -reports:"$COV_DIR/*.cobertura.xml;$COV_DIR/*.json" \
        -targetdir:"$HTML_DIR" \
        -reporttypes:"Cobertura;HtmlInline_AzurePipelines;JsonSummary"

      echo
      echo ">>> Gating from merged Cobertura: $MERGED_COB"
      if ! command -v xmllint >/dev/null 2>&1; then
        sudo apt-get update -y && sudo apt-get install -y libxml2-utils
      fi

      if [ ! -f "$MERGED_COB" ]; then
        echo "ERROR: Missing merged Cobertura at $MERGED_COB"
        echo "Available files:" && ls -la "$HTML_DIR" || true
        exit 3
      fi

      # Prefer explicit line-rate attribute
      line_rate=$(xmllint --xpath 'string(/coverage/@line-rate)' "$MERGED_COB" 2>/dev/null || true)
      if [ -n "${line_rate:-}" ]; then
        line_cov=$(awk -v r="$line_rate" 'BEGIN{printf "%.2f", (100.0*r)}')
        echo "Cobertura line-rate: $line_rate -> ${line_cov}%"
      else
        # Fallback to ratio from lines-covered / lines-valid
        lc=$(xmllint --xpath 'string(/coverage/@lines-covered)' "$MERGED_COB" 2>/dev/null || echo "")
        lv=$(xmllint --xpath 'string(/coverage/@lines-valid)'   "$MERGED_COB" 2>/dev/null || echo "")
        echo "Cobertura counters: lines-covered=${lc:-?}, lines-valid=${lv:-?}"
        if [ -n "${lc:-}" ] && [ -n "${lv:-}" ] && awk "BEGIN{exit !($lv > 0)}"; then
          line_cov=$(awk -v c="$lc" -v v="$lv" 'BEGIN{printf "%.2f", (100.0*c)/v}')
        else
          echo "ERROR: Cobertura has no usable counters. Head:"
          head -n 60 "$MERGED_COB" || true
          exit 3
        fi
      fi

      echo "Total line coverage: ${line_cov}%"
      threshold="$(COVERAGE_THRESHOLD)"
      lc_int=$(printf "%.0f" "$line_cov")
      th_int=$(printf "%.0f" "$threshold")

      if [ "$lc_int" -lt "$th_int" ]; then
        echo "Coverage gate FAILED: ${line_cov}% < ${threshold}%"
        exit 2
      else
        echo "Coverage gate PASSED: ${line_cov}% ≥ ${threshold}%"
      fi
    displayName: 'Unit tests: coverlet.console + merge + gate (Cobertura)'

  # ---------------- Publish Unit Test Results ----------------
  - task: PublishTestResults@2
    displayName: 'Publish Unit test results (.trx)'
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '$(Build.SourcesDirectory)/TestResults/*.trx'
      searchFolder: '$(Build.SourcesDirectory)/TestResults'
      testRunTitle: 'Unit Tests'
      mergeTestResults: true
      failTaskOnFailedTests: true

  # ---------------- Verify coverage files for publish ----------------
  - script: |
    set -euxo pipefail
    echo "Expecting Cobertura at: $(System.DefaultWorkingDirectory)/TestResults/Coverage/Report/Cobertura.xml"
    ls -la "$(System.DefaultWorkingDirectory)/TestResults/Coverage/Report" || true
    test -f "$(System.DefaultWorkingDirectory)/TestResults/Coverage/Report/Cobertura.xml"
    displayName: 'Verify Cobertura.xml exists for publish'

  # ---------------- Publish Code Coverage ----------------
  - task: PublishCodeCoverageResults@2
    displayName: 'Publish Unit test coverage (Cobertura)'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/TestResults/Coverage/Report/Cobertura.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/TestResults/Coverage/Report'
      pathToSources: '$(System.DefaultWorkingDirectory)'
      failIfCoverageEmpty: true

  # ---------------- Artifacts ----------------
  - task: PublishPipelineArtifact@1
    displayName: 'Publish coverage HTML artifact'
    inputs:
      targetPath: '$(Build.SourcesDirectory)/TestResults/Coverage/Report'
      artifact: 'coverage-report'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish raw test assets (trx + json + cobertura)'
    inputs:
      targetPath: '$(Build.SourcesDirectory)/TestResults'
      artifact: 'test-assets'