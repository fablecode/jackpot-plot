# ========================== Jackpot CI ==========================
# Runs: Restore → Build → Unit Tests (auto-discovered) → Coverage Merge + Gate (JsonSummary) → Integration Tests → Publish Reports
# =================================================================

trigger:
  - main

variables:
  DOTNET_SDK: '8.0.x'
  BUILD_CONFIGURATION: 'Release'
  SOLUTION: 'JackpotPlot.sln'
  COVERAGE_THRESHOLD: '70'                       # Minimum total line % required (gate)
  COVERAGE_EXCLUDE_BY_FILE: '**/Migrations/*.cs;**/Generated/**/*.cs;**/bin/**;**/obj/**'
  NUGET_PACKAGES: '$(Pipeline.Workspace)/.nuget/packages'

pool:
  vmImage: 'ubuntu-latest'

steps:
  # ---------------- Checkout ----------------
  - checkout: self
    fetchDepth: 0

  # ---------------- .NET SDK ----------------
  - task: UseDotNet@2
    displayName: "Install .NET SDK $(DOTNET_SDK)"
    inputs:
      packageType: 'sdk'
      version: '$(DOTNET_SDK)'

  # ---------------- Restore & Build ----------------
  - script: |
      set -euo pipefail
      export NUGET_PACKAGES="$(NUGET_PACKAGES)"
      dotnet restore "$(SOLUTION)"
      dotnet build "$(SOLUTION)" -c "$(BUILD_CONFIGURATION)" --no-restore
    displayName: 'dotnet restore + build'

  # ---------------- Coverage Tools ----------------
  - script: |
      set -euo pipefail
      dotnet tool install --global coverlet.console
      dotnet tool install --global dotnet-reportgenerator-globaltool
      echo '##vso[task.prependpath]'"$HOME/.dotnet/tools"
    displayName: 'Install coverlet + reportgenerator'

  # ---------------- Unit Tests + Coverage + Gate (JsonSummary) ----------------
- bash: |
    set -euo pipefail

    echo "Coverage threshold (line,total): $(COVERAGE_THRESHOLD)%"

    mkdir -p "$(Build.SourcesDirectory)/TestResults/coverage"
    mkdir -p "$(Build.SourcesDirectory)/TestResults/Coverage/Report"

    # --- Run unit tests per project (already discovered in your YAML; keep as-is if you have more) ---
    echo ">>> Running: JackpotPlot.Domain.Unit.Tests.csproj"
    dotnet test tests/Unit/JackpotPlot.Domain.Unit.Tests/JackpotPlot.Domain.Unit.Tests.csproj \
      -c $(BUILD_CONFIGURATION) \
      /p:CollectCoverage=true \
      /p:CoverletOutput="$(Build.SourcesDirectory)/TestResults/coverage/JackpotPlot.Domain.Unit.Tests.json" \
      /p:CoverletOutputFormat=json \
      /p:ExcludeByFile="$(COVERAGE_EXCLUDE_BY_FILE)" \
      --logger "trx;LogFileName=$(Build.SourcesDirectory)/TestResults/JackpotPlot.Domain.Unit.Tests.trx" \
      --no-build

    echo
    echo ">>> Running: JackpotPlot.Infrastructure.Unit.Tests.csproj"
    dotnet test tests/Unit/JackpotPlot.Infrastructure.Unit.Tests/JackpotPlot.Infrastructure.Unit.Tests.csproj \
      -c $(BUILD_CONFIGURATION) \
      /p:CollectCoverage=true \
      /p:MergeWith="$(Build.SourcesDirectory)/TestResults/coverage/JackpotPlot.Domain.Unit.Tests.json" \
      /p:CoverletOutput="$(Build.SourcesDirectory)/TestResults/coverage/JackpotPlot.Infrastructure.Unit.Tests.json" \
      /p:CoverletOutputFormat=json \
      /p:ExcludeByFile="$(COVERAGE_EXCLUDE_BY_FILE)" \
      --logger "trx;LogFileName=$(Build.SourcesDirectory)/TestResults/JackpotPlot.Infrastructure.Unit.Tests.trx" \
      --no-build

    echo
    echo ">>> Generating HTML + Cobertura + JsonSummary"
    report_dir="$(Build.SourcesDirectory)/TestResults/Coverage/Report"
    reports_glob="$(Build.SourcesDirectory)/TestResults/coverage/*.json"

    dotnet tool restore >/dev/null 2>&1 || true
    reportgenerator \
      -reports:"$reports_glob" \
      -targetdir:"$report_dir" \
      -reporttypes:"Cobertura;HtmlInline_AzurePipelines;JsonSummary"

    echo ">>> Gating from JsonSummary: $report_dir/Summary.json"
    SUMMARY_JSON="$report_dir/Summary.json"
    if [ ! -f "$SUMMARY_JSON" ]; then
      echo "ERROR: Missing $SUMMARY_JSON"
      exit 3
    fi

    # Extract total line coverage. Try multiple schema variants used by ReportGenerator.
    line_cov="$(
      jq -r '
        # Newer schema: metrics array with name "Line"
        (.report.metrics[]? | select(.name=="Line") | .coverage) //
        # Some builds: summary.coverage.line
        (.summary.coverage?.line) //
        # Legacy: summary.LineCoverage or summary.lineCoverage
        (.summary.LineCoverage // .summary.lineCoverage)
      ' "$SUMMARY_JSON"
    )"

    if [ -z "${line_cov:-}" ] || [ "$line_cov" = "null" ]; then
      echo "ERROR: Could not read total line coverage from $SUMMARY_JSON"
      echo "Schema keys (for debugging):"
      jq -r 'paths | map(tostring) | join(".")' "$SUMMARY_JSON" | sort -u | sed 's/^/  - /'
      exit 3
    fi

    echo "Total line coverage: ${line_cov}%"

    threshold="$(COVERAGE_THRESHOLD)"

    # Compare as integers to avoid float quirks
    lc_int=$(printf "%.0f" "$line_cov")
    th_int=$(printf "%.0f" "$threshold")

    if [ "$lc_int" -lt "$th_int" ]; then
      echo "Coverage gate FAILED: ${line_cov}% < ${threshold}%"
      exit 2
    else
      echo "Coverage gate PASSED: ${line_cov}% ≥ ${threshold}%"
    fi
  displayName: 'Unit tests: merge coverage + gate + report'


  # ---------------- Publish Unit Test Results ----------------
  - task: PublishTestResults@2
    displayName: 'Publish Unit test results (.trx)'
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '$(Build.SourcesDirectory)/TestResults/*.trx'
      searchFolder: '$(Build.SourcesDirectory)/TestResults'
      testRunTitle: 'Unit Tests'
      mergeTestResults: true
      failTaskOnFailedTests: true

  # ---------------- Publish Code Coverage ----------------
  - task: PublishCodeCoverageResults@2
    displayName: 'Publish Unit test coverage (Cobertura)'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/Coverage/Report/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/TestResults/Coverage/Report'
      failIfCoverageEmpty: true

  # ---------------- Integration Tests ----------------
  - script: |
      set -euo pipefail
      mapfile -t INTEGRATION_TESTS < <(git ls-files '**/*Integration.Tests.csproj' | sort)
      if [ "${#INTEGRATION_TESTS[@]}" -gt 0 ]; then
        for csproj in "${INTEGRATION_TESTS[@]}"; do
          dotnet test "$csproj" -c "$(BUILD_CONFIGURATION)" --no-build \
            --logger trx;LogFileName="$(basename "${csproj%.csproj}").trx" \
            --results-directory "$(Build.SourcesDirectory)/TestResults"
        done
      else
        echo "No Integration tests found."
      fi
    displayName: 'Integration tests (no coverage gate)'

  # ---------------- Artifacts ----------------
  - task: PublishPipelineArtifact@1
    displayName: 'Publish coverage HTML artifact'
    inputs:
      targetPath: '$(Build.SourcesDirectory)/TestResults/Coverage/Report'
      artifact: 'coverage-report'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish raw test assets (trx + json)'
    inputs:
      targetPath: '$(Build.SourcesDirectory)/TestResults'
      artifact: 'test-assets'