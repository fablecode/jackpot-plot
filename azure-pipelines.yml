# ========================== Jackpot CI ==========================
# Runs: Restore → Build → Unit Tests (auto-discovered) → Coverage Merge + Gate (Cobertura-first, JsonSummary fallback) → Integration Tests → Publish Reports
# =================================================================

trigger:
  - main

variables:
  DOTNET_SDK: '8.0.x'
  BUILD_CONFIGURATION: 'Release'
  SOLUTION: 'JackpotPlot.sln'
  COVERAGE_THRESHOLD: '70'                       # Minimum total line % required (gate)
  COVERAGE_EXCLUDE_BY_FILE: '**/Migrations/*.cs;**/Generated/**/*.cs;**/bin/**;**/obj/**'
  NUGET_PACKAGES: '$(Pipeline.Workspace)/.nuget/packages'

pool:
  vmImage: 'ubuntu-latest'

steps:
  # ---------------- Checkout ----------------
  - checkout: self
    fetchDepth: 0

  # ---------------- .NET SDK ----------------
  - task: UseDotNet@2
    displayName: "Install .NET SDK $(DOTNET_SDK)"
    inputs:
      packageType: 'sdk'
      version: '$(DOTNET_SDK)'

  # ---------------- Restore & Build ----------------
  - script: |
      set -euo pipefail
      export NUGET_PACKAGES="$(NUGET_PACKAGES)"
      dotnet restore "$(SOLUTION)"
      dotnet build "$(SOLUTION)" -c "$(BUILD_CONFIGURATION)" --no-restore
    displayName: 'dotnet restore + build'

  # ---------------- Coverage Tools ----------------
  - script: |
      set -euo pipefail
      dotnet tool install --global coverlet.console
      dotnet tool install --global dotnet-reportgenerator-globaltool
      echo '##vso[task.prependpath]'"$HOME/.dotnet/tools"
    displayName: 'Install coverlet + reportgenerator'

  # ---------------- Unit Tests + Coverage + Gate (Cobertura-first) ----------------
  - script: |
      set -euo pipefail

      OUT_ROOT="$(Build.SourcesDirectory)/TestResults"
      TRX_DIR="$OUT_ROOT"
      COV_DIR="$OUT_ROOT/coverage"
      HTML_DIR="$OUT_ROOT/Coverage/Report"
      SUMMARY_JSON="$HTML_DIR/Summary.json"
      COB_XML="$HTML_DIR/Cobertura.xml"
      mkdir -p "$TRX_DIR" "$COV_DIR" "$HTML_DIR"

      threshold=$(COVERAGE_THRESHOLD)
      echo "Coverage threshold (line,total): ${threshold}%"

      # Discover Unit test projects
      mapfile -t UNIT_TESTS < <(git ls-files '**/*Unit.Tests.csproj' | sort)
      if [ "${#UNIT_TESTS[@]}" -eq 0 ]; then
        echo "No Unit test projects found."
        exit 1
      fi

      MERGED_JSON=""

      for csproj in "${UNIT_TESTS[@]}"; do
        name="$(basename "$csproj")"            # e.g. JackpotPlot.Domain.Unit.Tests.csproj
        base="${name%.csproj}"                  # JackpotPlot.Domain.Unit.Tests
        sut_prefix="${base%.Unit.Tests}"        # JackpotPlot.Domain
        if [[ "$sut_prefix" == "$base" ]]; then sut_prefix="JackpotPlot"; fi

        include_filter="[${sut_prefix}*]*"
        test_assembly_glob="$(dirname "$csproj")/bin/$(BUILD_CONFIGURATION)/**/${base}.dll"
        out_json="$COV_DIR/${base}.json"

        echo ">>> Running: $name"
        echo "    SUT Include: $include_filter"
        echo "    Output JSON: $out_json"

        if [ -n "${MERGED_JSON}" ]; then
          coverlet $test_assembly_glob \
            --target "dotnet" \
            --targetargs "test \"$csproj\" -c $(BUILD_CONFIGURATION) --no-build --logger trx;LogFileName=${base}.trx --results-directory \"$TRX_DIR\"" \
            --include "$include_filter" \
            --exclude-by-file "$(COVERAGE_EXCLUDE_BY_FILE)" \
            --format json \
            --output "$out_json" \
            --merge-with "$MERGED_JSON"
        else
          coverlet $test_assembly_glob \
            --target "dotnet" \
            --targetargs "test \"$csproj\" -c $(BUILD_CONFIGURATION) --no-build --logger trx;LogFileName=${base}.trx --results-directory \"$TRX_DIR\"" \
            --include "$include_filter" \
            --exclude-by-file "$(COVERAGE_EXCLUDE_BY_FILE)" \
            --format json \
            --output "$out_json"
        fi

        MERGED_JSON="$out_json"
      done

      echo ">>> Generating HTML + Cobertura + JsonSummary"
      reportgenerator \
        -reports:"$COV_DIR/*.json" \
        -targetdir:"$HTML_DIR" \
        -reporttypes:"Cobertura;HtmlInline_AzurePipelines;JsonSummary"

      echo ">>> Gating (Cobertura-first):"
      if ! command -v jq >/dev/null 2>&1; then
        sudo apt-get update -y && sudo apt-get install -y jq
      fi
      if ! command -v xmllint >/dev/null 2>&1; then
        sudo apt-get update -y && sudo apt-get install -y libxml2-utils
      fi

      # --------- Try Cobertura.xml first ----------
      if [ -f "$COB_XML" ]; then
        line_rate=$(xmllint --xpath 'string(/coverage/@line-rate)' "$COB_XML" 2>/dev/null || true)

        if [ -n "${line_rate:-}" ]; then
          line_cov=$(awk -v r="$line_rate" 'BEGIN{printf "%.2f", (100.0*r)}')
          echo "Cobertura line-rate: $line_rate -> ${line_cov}%"
        else
          lc=$(xmllint --xpath 'string(/coverage/@lines-covered)' "$COB_XML" 2>/dev/null || echo "")
          lv=$(xmllint --xpath 'string(/coverage/@lines-valid)'   "$COB_XML" 2>/dev/null || echo "")
          echo "Cobertura counters: lines-covered=${lc:-?}, lines-valid=${lv:-?}"

          if [ -n "${lc:-}" ] && [ -n "${lv:-}" ] && awk "BEGIN{exit !($lv > 0)}"; then
            line_cov=$(awk -v c="$lc" -v v="$lv" 'BEGIN{printf "%.2f", (100.0*c)/v}')
          else
            line_cov=""
          fi
        fi
      else
        echo "WARNING: Missing Cobertura.xml at $COB_XML"
        line_cov=""
      fi

      # --------- If Cobertura failed, try JsonSummary fallback ----------
      if [ -z "${line_cov:-}" ]; then
        echo "Falling back to JsonSummary: $SUMMARY_JSON"
        if [ ! -f "$SUMMARY_JSON" ]; then
          echo "ERROR: Missing $SUMMARY_JSON"
          exit 3
        fi

        pct_raw="$(
          jq -r '
            (.report.metrics[]? | select((.name // "") | ascii_downcase == "line") | .coverage) //
            (.summary.coverage?.line) //
            (.summary.LineCoverage // .summary.lineCoverage // .summary.linecoverage) //
            empty
          ' "$SUMMARY_JSON"
        )"

        if [ -n "${pct_raw:-}" ] && [ "$pct_raw" != "null" ]; then
          line_cov="$pct_raw"
        else
          covered=$(jq -r '.summary.coveredlines // .summary.coveredLines // 0' "$SUMMARY_JSON")
          total=$(jq -r '.summary.totallines // .summary.totalLines // .summary.coverablelines // 0' "$SUMMARY_JSON")
          echo "JsonSummary counters: coveredlines=$covered, totallines=$total"

          if awk "BEGIN{exit !($total > 0)}"; then
            line_cov=$(awk -v c="$covered" -v t="$total" 'BEGIN{printf "%.2f", (100.0*c)/t}')
          else
            line_cov=""
          fi
        fi
      fi

      if [ -z "${line_cov:-}" ]; then
        echo "ERROR: Could not determine total line coverage from either Cobertura.xml or Summary.json"
        echo "Cobertura head:" && head -n 20 "$COB_XML" || true
        echo "Summary preview:" && jq -r '{linecoverage,coveredlines,totallines,coverablelines}' "$SUMMARY_JSON" || true
        exit 3
      fi

      echo "Total line coverage: ${line_cov}%"

      threshold="$(COVERAGE_THRESHOLD)"

      # Compare as integers to avoid float quirks
      lc_int=$(printf "%.0f" "$line_cov")
      th_int=$(printf "%.0f" "$threshold")

      if [ "$lc_int" -lt "$th_int" ]; then
        echo "Coverage gate FAILED: ${line_cov}% < ${threshold}%"
        exit 2
      else
        echo "Coverage gate PASSED: ${line_cov}% ≥ ${threshold}%"
      fi
    displayName: 'Unit tests: merge coverage + gate + report'

  # ---------------- Publish Unit Test Results ----------------
  - task: PublishTestResults@2
    displayName: 'Publish Unit test results (.trx)'
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '$(Build.SourcesDirectory)/TestResults/*.trx'
      searchFolder: '$(Build.SourcesDirectory)/TestResults'
      testRunTitle: 'Unit Tests'
      mergeTestResults: true
      failTaskOnFailedTests: true

  # ---------------- Verify coverage files for publish ----------------
  - script: |
      set -euxo pipefail
      echo "Expecting Cobertura at: $(System.DefaultWorkingDirectory)/TestResults/Coverage/Report/Cobertura.xml"
      ls -la "$(System.DefaultWorkingDirectory)/TestResults/Coverage/Report" || true
      test -f "$(System.DefaultWorkingDirectory)/TestResults/Coverage/Report/Cobertura.xml"
    displayName: 'Verify Cobertura.xml exists for publish'

  # ---------------- Publish Code Coverage ----------------
  - task: PublishCodeCoverageResults@2
    displayName: 'Publish Unit test coverage (Cobertura)'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/TestResults/Coverage/Report/Cobertura.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/TestResults/Coverage/Report'
      pathToSources: '$(System.DefaultWorkingDirectory)'
      failIfCoverageEmpty: true

  # ---------------- Artifacts ----------------
  - task: PublishPipelineArtifact@1
    displayName: 'Publish coverage HTML artifact'
    inputs:
      targetPath: '$(Build.SourcesDirectory)/TestResults/Coverage/Report'
      artifact: 'coverage-report'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish raw test assets (trx + json)'
    inputs:
      targetPath: '$(Build.SourcesDirectory)/TestResults'
      artifact: 'test-assets'